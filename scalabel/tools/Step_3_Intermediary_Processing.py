import argparse
import json
from pathlib import Path
from PIL import Image, ImageOps


"""
Process Step 3: Intermediary Processing

Fixes the config file generated by scalabel by readding the framegroups

Adds watermarks to the images that are not candidates for labeling
"""

if __name__ == "__main__":

    parser = argparse.ArgumentParser('Process Step 3: Intermediary Processing')
    parser.add_argument('data_folder', type=str, help='Path data folder')
    parser.add_argument('config_file_path', type=str, help='Path to config file gnereated by scalabel')
    parser.add_argument('original_config_file_path', type=str, help='Path to original config file from step 1')
    parser.add_argument('watermark_file_path', type=str, help='Path to watermark file')
   
    args = parser.parse_args()

    data_folder = Path(args.data_folder)
    assert data_folder.exists(), f'Data folder does not exist: {data_folder}'
    assert data_folder.is_dir(), f'Data folder is not a directory: {data_folder}'

    config_file = Path(args.config_file_path)
    assert config_file.exists(), f'Config file does not exist: {config_file}'
    assert config_file.is_file(), f'Config file is not a file: {config_file}'
    assert config_file.suffix == '.json', f'Config file is not a json file: {config_file}'

    original_config_file = Path(args.original_config_file_path)
    assert original_config_file.exists(), f'Config file does not exist: {original_config_file}'
    assert original_config_file.is_file(), f'Config file is not a file: {original_config_file}'
    assert original_config_file.suffix == '.json', f'Config file is not a json file: {original_config_file}'

    watermark_file = Path(args.watermark_file_path)
    assert watermark_file.exists(), f'Watermark file does not exist: {watermark_file}'
    assert watermark_file.is_file(), f'Watermark file is not a file: {watermark_file}'
    assert watermark_file.suffix == '.png', f'Watermark file is not a png file: {watermark_file}'

    with open(config_file, 'r') as f:
        config = json.load(f)
    
    with open(original_config_file, 'r') as f:
        original_config = json.load(f)

    # duplicate rgb folder and contents before adding watermarks
    rgb_folder = data_folder / 'rgb'
    rgb_folder_duplicate = data_folder / 'rgb_duplicate'
    if not rgb_folder_duplicate.exists():
        print("Duplicating rgb folder")
        rgb_folder_duplicate.mkdir()
        for file in rgb_folder.iterdir():
            new_file = rgb_folder_duplicate / file.name
            if not new_file.exists():
                with file.open('rb') as f:
                    with new_file.open('wb') as nf:
                        nf.write(f.read())
    else:
        print("rgb_duplicate folder already exists. Files will not be duplicated.")

    
    # Add framegroups
    print("Adding framegroups")
    fg = original_config["frameGroups"]
    config["frameGroups"] = fg
    
    # Add watermarks
    print("Adding watermarks")
    
    for frame in config["frames"]:
        if frame["sensor"] == 0:
            assert "attributes" in frame, f'Frame {frame["name"]} does not have attributes, are you sure you are using the scalabel config file?'
            attributes = frame["attributes"]
            if "Candidate" in attributes:
                if attributes["Candidate"]:
                    continue
            # Add watermark to image by loading it and saving it again
            image_path = rgb_folder / frame["url"].split("/")[-1]
            assert image_path.exists(), f'Image {image_path} does not exist'
            assert image_path.is_file(), f'Image {image_path} is not a file'
            with Image.open(image_path) as image:
                watermark = Image.open(watermark_file)
                image.paste(watermark, (0, 0), watermark)
                image.save(image_path)
            print("Watermark added to image: ", image_path)

    # Save config file
    with open(config_file, 'w') as f:
        json.dump(config, f, indent=4)

    print("Done")


                    
